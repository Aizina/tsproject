{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP,kBAAkB,6FAA6F;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACbA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACiC;AACM;AAChC;AACP;AACA,wBAAwB,0CAAI;AAC5B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6CAA6C,gDAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4BAA4B,EAAE,0BAA0B;AAC1G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAO;AAC1C;AACA,yBAAyB,4BAA4B,EAAE,0BAA0B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qFAAqF,WAAW,+BAA+B,WAAW;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,wBAAwB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,WAAW;AAC5E;AACA;AACA,8FAA8F,iBAAiB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,GAAG;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA,wFAAwF,GAAG;AAC3F;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAO;AACxC;AACA,yBAAyB,4BAA4B,EAAE,0BAA0B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,kBAAkB,IAAI,GAAG,OAAO,EAAE,MAAM,GAAG,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;;;;;;;;;;;;;;;ACnXA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;UC1BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACmD;AACnD;AACA,8BAA8B,4DAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC","sources":["webpack://ts_project/./dist/comment.js","webpack://ts_project/./dist/commentSystem.js","webpack://ts_project/./dist/user.js","webpack://ts_project/webpack/bootstrap","webpack://ts_project/webpack/runtime/define property getters","webpack://ts_project/webpack/runtime/hasOwnProperty shorthand","webpack://ts_project/webpack/runtime/make namespace object","webpack://ts_project/./dist/init.js"],"sourcesContent":["export class Comment {\n    constructor({ avatar, name, text, date, id, votes, favorites, parentId, replyNumber, voteColor = 'black', }) {\n        this.avatar = avatar;\n        this.name = name;\n        this.text = text;\n        this.date = date instanceof Date ? date : new Date(date);\n        this.id = id;\n        this.votes = votes;\n        this.favorites = favorites;\n        this.parentId = parentId;\n        this.replyNumber = replyNumber;\n        this.voteColor = voteColor;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { User } from './user.js';\nimport { Comment } from './comment.js';\nexport class CommentSystem {\n    constructor() {\n        this.user = new User();\n        this.comments = this.loadCommentsFromStorage();\n        this.currentSort = { field: 'date', order: 'asc' };\n        this.randomUser = null;\n    }\n    loadCommentsFromStorage() {\n        const comments = JSON.parse(localStorage.getItem('comments') || '[]');\n        return comments.map((comment) => new Comment(comment));\n    }\n    saveCommentsToStorage() {\n        localStorage.setItem('comments', JSON.stringify(this.comments));\n    }\n    updateCommentCount() {\n        const commentAmountElement = document.getElementById('comment-amount');\n        const comments = JSON.parse(localStorage.getItem('comments') || '[]');\n        const commentCount = comments.length;\n        if (commentAmountElement) {\n            commentAmountElement.textContent = `(${commentCount})`;\n        }\n    }\n    loadRandomUser() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.randomUser = yield this.user.fetchRandomUser();\n            if (this.randomUser) {\n                const userAvatar = document.getElementById('main-user-avatar');\n                const mainUserName = document.getElementById('main-user-name');\n                if (userAvatar && mainUserName) {\n                    userAvatar.src = this.randomUser.picture.thumbnail;\n                    mainUserName.textContent = `${this.randomUser.name.first} ${this.randomUser.name.last}`;\n                }\n            }\n            else {\n                alert(\"Не удалось загрузить данные пользователя. Пожалуйста, перезагрузите страницу.\");\n            }\n        });\n    }\n    addComment() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const commentTextElement = document.getElementById('new-comment-text');\n            const commentText = commentTextElement.value.trim();\n            if (!commentText) {\n                alert(\"Комментарий не может быть пустым.\");\n                return;\n            }\n            if (commentText.length > 1000) {\n                alert(\"Комментарий не может быть длиннее 1000 символов.\");\n                return;\n            }\n            if (!this.randomUser) {\n                alert(\"Не удалось загрузить данные пользователя. Попробуйте снова.\");\n                return;\n            }\n            const newComment = new Comment({\n                avatar: this.randomUser.picture.thumbnail,\n                name: `${this.randomUser.name.first} ${this.randomUser.name.last}`,\n                text: commentText,\n                date: new Date(),\n                id: Date.now(),\n                votes: 0,\n                favorites: false,\n                parentId: null,\n                replyNumber: 0,\n                voteColor: 'black'\n            });\n            this.comments.push(newComment);\n            this.saveCommentsToStorage();\n            commentTextElement.value = \"\";\n            this.updateCharCount();\n            this.adjustTextareaHeight();\n            yield this.refreshComments();\n            yield this.loadRandomUser();\n        });\n    }\n    saveComment(comment) {\n        this.comments = this.comments.filter(c => c.id !== comment.id);\n        this.comments.push(comment);\n        this.saveCommentsToStorage();\n    }\n    loadComments() {\n        return __awaiter(this, void 0, void 0, function* () {\n            document.getElementById('comments-list').innerHTML = '';\n            this.comments.forEach(comment => this.displayComment(comment));\n        });\n    }\n    displayComment(comment) {\n        var _a;\n        const existingComment = document.querySelector(`.comment-template[data-id=\"${comment.id}\"], .reply-template[data-id=\"${comment.id}\"]`);\n        if (existingComment) {\n            return;\n        }\n        const template = comment.parentId === null\n            ? document.querySelector('.comment-template').cloneNode(true)\n            : document.querySelector('.reply-template').cloneNode(true);\n        template.style.display = 'block';\n        template.setAttribute('data-id', comment.id.toString());\n        const userAvatar = template.querySelector('.user-avatar');\n        const userName = template.querySelector('.user-name');\n        const commentText = template.querySelector('.comment-text');\n        const commentDate = template.querySelector('.comment-date');\n        const voteRating = template.querySelector('.vote-rating');\n        const upvoteButton = template.querySelector('.upvote-button');\n        const downvoteButton = template.querySelector('.downvote-button');\n        if (userAvatar && userName && commentText && commentDate && voteRating && upvoteButton && downvoteButton) {\n            userAvatar.src = comment.avatar;\n            userName.textContent = comment.name;\n            commentText.textContent = comment.text;\n            commentDate.textContent = this.formatDate(comment.date);\n            voteRating.style.color = comment.voteColor || 'black';\n            voteRating.textContent = comment.votes.toString();\n            upvoteButton.addEventListener('click', () => this.upVote(comment.id));\n            downvoteButton.addEventListener('click', () => this.downVote(comment.id));\n        }\n        const favoriteButton = template.querySelector('.favorite-button');\n        if (favoriteButton) {\n            favoriteButton.innerHTML = comment.favorites ? '&#9829; В избранном' : '&#9825; В избранное';\n            favoriteButton.addEventListener('click', () => this.toggleFavorite(comment.id));\n        }\n        const replyButton = template.querySelector('.reply-button');\n        if (replyButton) {\n            replyButton.addEventListener('click', () => this.toggleReplyForm(comment.id));\n            const submitReplyButton = template.querySelector('.submit-reply');\n            if (submitReplyButton) {\n                submitReplyButton.addEventListener('click', () => this.reply(comment.id));\n            }\n        }\n        if (comment.parentId === null) {\n            document.getElementById('comments-list').appendChild(template);\n            document.querySelector(`.comment-template[data-id=\"${comment.id}\"] .replies-list`).innerHTML = \"\";\n        }\n        else {\n            const parentCommentElement = document.querySelector(`.comment-template[data-id=\"${comment.parentId}\"]`);\n            if (parentCommentElement) {\n                const parentCommentElementName = (_a = parentCommentElement.querySelector('.user-name')) === null || _a === void 0 ? void 0 : _a.textContent;\n                const parentCommentNameElement = template.querySelector('.parent-comment-name');\n                if (parentCommentNameElement) {\n                    parentCommentNameElement.textContent = parentCommentElementName || '';\n                }\n                const repliesList = parentCommentElement.querySelector('.replies-list');\n                if (repliesList) {\n                    repliesList.appendChild(template);\n                    if (replyButton) {\n                        const replyButtonElement = replyButton;\n                        replyButtonElement.style.display = 'none'; // Hide the reply button on replies\n                    }\n                }\n            }\n        }\n    }\n    toggleReplyForm(id) {\n        const commentElement = document.querySelector(`.comment-template[data-id=\"${id}\"]`);\n        if (commentElement) {\n            const replyForm = commentElement.querySelector('.reply-form');\n            if (replyForm) {\n                replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';\n            }\n        }\n        else {\n            alert(`Comment with id ${id} not found.`);\n        }\n    }\n    reply(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const commentElement = document.querySelector(`.comment-template[data-id=\"${id}\"]`);\n            if (!commentElement) {\n                alert(`Comment with id ${id} not found.`);\n                return;\n            }\n            const replyTextElement = commentElement.querySelector('.reply-text');\n            const replyText = replyTextElement.value.trim();\n            if (!replyText) {\n                alert(\"Комментарий не может быть пустым.\");\n                return;\n            }\n            if (replyText.length > 1000) {\n                alert(\"Комментарий не может быть длиннее 1000 символов.\");\n                return;\n            }\n            if (!this.randomUser) {\n                alert(\"Не удалось загрузить данные пользователя. Попробуйте снова.\");\n                return;\n            }\n            const newReply = new Comment({\n                avatar: this.randomUser.picture.thumbnail,\n                name: `${this.randomUser.name.first} ${this.randomUser.name.last}`,\n                text: replyText,\n                date: new Date(),\n                id: Date.now(),\n                parentId: id,\n                votes: 0,\n                favorites: false,\n                replyNumber: 0,\n                voteColor: 'black'\n            });\n            this.saveComment(newReply);\n            replyTextElement.value = \"\";\n            yield this.refreshComments();\n            yield this.loadRandomUser();\n        });\n    }\n    updateCharCount() {\n        const commentTextElement = document.getElementById('new-comment-text');\n        const charCount = commentTextElement.value.length;\n        const charCountDisplay = document.getElementById('char-count');\n        const charWarning = document.getElementById('char-warning');\n        const submitButton = document.getElementById('submit-comment');\n        if (charCountDisplay) {\n            charCountDisplay.textContent = `${charCount} / 1000`;\n        }\n        if (charCount > 1000) {\n            if (charWarning) {\n                charWarning.style.display = 'block';\n            }\n            if (submitButton) {\n                submitButton.disabled = true;\n            }\n        }\n        else {\n            if (charWarning) {\n                charWarning.style.display = 'none';\n            }\n            if (submitButton) {\n                submitButton.style.background = '#ABD873';\n                submitButton.style.opacity = '1';\n                submitButton.disabled = false;\n            }\n        }\n    }\n    upVote(id) {\n        const comment = this.comments.find(c => c.id === id);\n        if (comment) {\n            comment.votes++;\n            comment.voteColor = comment.votes > 0 ? '#8AC540' : comment.votes < 0 ? '#FF0000' : 'black';\n            this.saveCommentsToStorage();\n            this.refreshComments();\n        }\n    }\n    downVote(id) {\n        const comment = this.comments.find(c => c.id === id);\n        if (comment) {\n            comment.votes--;\n            comment.voteColor = comment.votes > 0 ? '#8AC540' : comment.votes < 0 ? '#FF0000' : 'black';\n            this.saveCommentsToStorage();\n            this.refreshComments();\n        }\n    }\n    toggleFavorite(id) {\n        const comment = this.comments.find(c => c.id === id);\n        if (comment) {\n            comment.favorites = !comment.favorites;\n            this.saveCommentsToStorage();\n            this.refreshComments();\n        }\n    }\n    sortComments(field, order) {\n        this.comments.sort((a, b) => {\n            if (field === 'date' || field === 'relevance') {\n                return order === 'asc' ? new Date(a.date).getTime() - new Date(b.date).getTime() : new Date(b.date).getTime() - new Date(a.date).getTime();\n            }\n            if (field === 'rating') {\n                return order === 'asc' ? a.votes - b.votes : b.votes - a.votes;\n            }\n            if (field === 'replies') {\n                const repliesA = this.comments.filter(comment => comment.parentId === a.id).length;\n                const repliesB = this.comments.filter(comment => comment.parentId === b.id).length;\n                return order === 'asc' ? repliesA - repliesB : repliesB - repliesA;\n            }\n            return 0;\n        });\n        this.refreshComments();\n    }\n    filterFavorites() {\n        const favorites = this.comments.filter(comment => comment.favorites);\n        document.getElementById('comments-list').innerHTML = '';\n        favorites.forEach(comment => this.displayComment(comment));\n    }\n    refreshComments() {\n        return __awaiter(this, void 0, void 0, function* () {\n            document.getElementById('comments-list').innerHTML = '';\n            const parentComments = this.comments.filter(comment => comment.parentId === null);\n            const replies = this.comments.filter(comment => comment.parentId !== null);\n            parentComments.forEach(parent => {\n                this.displayComment(parent);\n                const childComments = replies.filter(reply => reply.parentId === parent.id);\n                childComments.forEach(reply => this.displayComment(reply));\n            });\n        });\n    }\n    formatDate(date) {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0'); // Месяцы начинаются с 0\n        const hours = String(d.getHours()).padStart(2, '0');\n        const minutes = String(d.getMinutes()).padStart(2, '0');\n        return `${day}.${month} ${hours}:${minutes}`;\n    }\n    addSortEventListeners() {\n        const selectedOptionElement = document.getElementById('selected-option');\n        const optionsContainer = document.getElementById('options');\n        const options = document.querySelectorAll('.option');\n        const sortButtonElement = document.querySelector('.sort-button');\n        const favoritesToggleElement = document.getElementById('favorites-toggle');\n        if (selectedOptionElement && optionsContainer && options.length) {\n            selectedOptionElement.addEventListener('click', () => {\n                optionsContainer.style.display = optionsContainer.style.display === 'block' ? 'none' : 'block';\n            });\n            options.forEach(option => {\n                option.addEventListener('click', () => {\n                    const selectedValue = option.getAttribute('data-value');\n                    if (selectedOptionElement && selectedValue) {\n                        selectedOptionElement.textContent = option.textContent;\n                        optionsContainer.style.display = 'none';\n                        this.currentSort.field = selectedValue;\n                        this.sortComments(this.currentSort.field, this.currentSort.order);\n                        options.forEach(opt => opt.classList.remove('selected'));\n                        option.classList.add('selected');\n                    }\n                });\n            });\n            document.addEventListener('click', (event) => {\n                if (!document.querySelector('.dropdown').contains(event.target)) {\n                    optionsContainer.style.display = 'none';\n                }\n            });\n        }\n        else {\n            console.error(\"Dropdown elements not found.\");\n        }\n        if (sortButtonElement) {\n            sortButtonElement.addEventListener('click', () => {\n                if (sortButtonElement.classList.contains('asc')) {\n                    this.currentSort.order = 'asc';\n                    this.sortComments(this.currentSort.field, this.currentSort.order);\n                    sortButtonElement.classList.remove('asc');\n                    sortButtonElement.classList.add('desc');\n                }\n                else {\n                    this.currentSort.order = 'desc';\n                    this.sortComments(this.currentSort.field, this.currentSort.order);\n                    sortButtonElement.classList.remove('desc');\n                    sortButtonElement.classList.add('asc');\n                }\n            });\n        }\n        else {\n            console.error(\"Element '.sort-button' not found.\");\n        }\n        if (favoritesToggleElement) {\n            favoritesToggleElement.addEventListener('click', () => this.filterFavorites());\n        }\n        else {\n            console.error(\"Element 'favorites-toggle' not found.\");\n        }\n    }\n    adjustTextareaHeight() {\n        const textarea = document.getElementById('new-comment-text');\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight}px`;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class User {\n    fetchRandomUser() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield fetch('https://randomuser.me/api/');\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = yield response.json();\n                return data.results[0];\n            }\n            catch (error) {\n                console.error('Error fetching random user:', error);\n                return null;\n            }\n        });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CommentSystem } from './commentSystem.js';\ndocument.addEventListener('DOMContentLoaded', () => __awaiter(void 0, void 0, void 0, function* () {\n    const commentSystem = new CommentSystem();\n    yield commentSystem.loadRandomUser();\n    commentSystem.addSortEventListeners();\n    yield commentSystem.loadComments();\n    commentSystem.updateCommentCount();\n    const submitCommentButton = document.getElementById('submit-comment');\n    const newCommentText = document.getElementById('new-comment-text');\n    const clearStorageButton = document.getElementById('clear-storage');\n    if (submitCommentButton) {\n        submitCommentButton.addEventListener('click', () => commentSystem.addComment());\n        submitCommentButton.addEventListener('click', () => commentSystem.updateCommentCount());\n    }\n    if (newCommentText) {\n        newCommentText.addEventListener('input', () => {\n            commentSystem.updateCharCount();\n            commentSystem.adjustTextareaHeight();\n        });\n    }\n    if (clearStorageButton) {\n        clearStorageButton.addEventListener('click', () => {\n            localStorage.removeItem('comments');\n            commentSystem.comments = [];\n            commentSystem.refreshComments();\n            commentSystem.updateCommentCount();\n        });\n    }\n}));\n"],"names":[],"sourceRoot":""}